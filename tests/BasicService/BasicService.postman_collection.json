{
	"info": {
		"_postman_id": "0e1d8390-fcd4-4264-8e36-ab94fb284630",
		"name": "\bBasicService",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Hello",
			"item": [
				{
					"name": "/api/basicService/test/hello",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "36358701-1a24-4107-b8c2-631cf748d8df",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"name": "Content-Type",
								"type": "text",
								"value": "",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/api/basicService/test/hello",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"basicService",
								"test",
								"hello"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get",
			"item": [
				{
					"name": "/api/basicService/get - Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3d55569a-100a-48c0-9a1d-4dfa242d3388",
								"exec": [
									"console.log(pm.globals.get(\"record-num\"));",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has a body in json format\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    ",
									"    pm.response.to.have.jsonBody(\"resultCode\");",
									"    pm.response.to.have.jsonBody(\"message\");",
									"    pm.response.to.have.jsonBody(\"numRecords\");",
									"    ",
									"});",
									"",
									"pm.test(\"Response contains a success message\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.resultCode).eql(0);",
									"",
									"    pm.expect(jsonData.message).not.eql(null);",
									"    pm.expect(jsonData.message).to.contain(\"success\");",
									"    ",
									"});",
									"",
									"pm.test(\"Response contains the correct result\", function () {",
									"    let jsonData = pm.response.json();",
									"    // the number should match the records in database.",
									"    // you may test yourself. grading script will manage the database outside postman/newman",
									"    console.log(\"expecting \"+ pm.variables.get(\"record-num\"))",
									"    pm.expect(jsonData.numRecords).eql(pm.variables.get(\"record-num\"));",
									"    ",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/api/basicService/get",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"basicService",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/basicService/get/{id} - Valid And Exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3d55569a-100a-48c0-9a1d-4dfa242d3388",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has a body in json format\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    ",
									"    pm.response.to.have.jsonBody(\"resultCode\");",
									"    pm.response.to.have.jsonBody(\"message\");",
									"    pm.response.to.have.jsonBody(\"record\");",
									"    ",
									"});",
									"",
									"pm.test(\"Response contains a success message\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.resultCode).eql(0);",
									"",
									"    pm.expect(jsonData.message).not.eql(null);",
									"    pm.expect(jsonData.message).to.contain(\"success\");",
									"    ",
									"});",
									"",
									"pm.test(\"Response contains the correct result\", function () {",
									"",
									"    let jsonData = pm.response.json();",
									"    // the output should match the records in database.",
									"    // you may test yourself. grading script will manage the database outside postman/newman",
									"    pm.expect(jsonData.record).eql(JSON.parse(pm.globals.get(\"texts\"))[JSON.parse(pm.globals.get(\"texts-index\"))-1]);",
									"",
									"    ",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5eac4b96-acea-4380-9af2-b6a912a76e21",
								"exec": [
									"postman.setGlobalVariable(\"texts\", JSON.stringify([{",
									"                            \"id\": 1,",
									"                            \"sentence\": \"Lorem ipsum dapibus purus a suscipit elit risus ac cras orci ad.\",",
									"                            \"len\": 12",
									"                        },",
									"                        {",
									"                            \"id\": 2,",
									"                            \"sentence\": \"Etiam vulputate lobortis ultricies gravida fusce.\",",
									"                            \"len\": 6",
									"                        },",
									"                        {",
									"                            \"id\": 3,",
									"                            \"sentence\": \"Taciti vulputate magna ornare macenas dui, donec morbi suspendisse turpis urna, turpis in tempor por.\",",
									"                            \"len\": 15",
									"                           ",
									"                        }",
									"                        ]));",
									"                        ",
									"",
									"            ",
									"postman.setGlobalVariable(\"texts-index\", _.random(1,3));            ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/api/basicService/get/{{texts-index}}",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"basicService",
								"get",
								"{{texts-index}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/basicService/get/{id} - Valid But Not Exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3d55569a-100a-48c0-9a1d-4dfa242d3388",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has a body in json format\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    ",
									"    pm.response.to.have.jsonBody(\"resultCode\");",
									"    pm.response.to.have.jsonBody(\"message\");",
									"    pm.response.to.have.jsonBody(\"record\");",
									"    ",
									"});",
									"",
									"pm.test(\"Response contains a success message\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.resultCode).eql(1);",
									"",
									"    pm.expect(jsonData.message).not.eql(null);",
									"    pm.expect(jsonData.message).to.contain(\"Record not found\");",
									"    ",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5eac4b96-acea-4380-9af2-b6a912a76e21",
								"exec": [
									"postman.setGlobalVariable(\"texts\", JSON.stringify([{",
									"                            \"id\": 1,",
									"                            \"sentence\": \"Lorem ipsum dapibus purus a suscipit elit risus ac cras orci ad.\",",
									"                            \"len\": 12",
									"                        },",
									"                        {",
									"                            \"id\": 2,",
									"                            \"sentence\": \"Etiam vulputate lobortis ultricies gravida fusce.\",",
									"                            \"len\": 6",
									"                        },",
									"                        {",
									"                            \"id\": 3,",
									"                            \"sentence\": \" Taciti vulputate magna ornare macenas dui, donec morbi suspendisse turpis urna, turpis in tempor por.\",",
									"                            \"len\": 15",
									"                           ",
									"                        }",
									"                        ]));",
									"                        ",
									"postman.setGlobalVariable(\"texts-index\", 999);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/api/basicService/get/{{texts-index}}",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"basicService",
								"get",
								"{{texts-index}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ValidateString",
			"item": [
				{
					"name": "Valid Request",
					"item": [
						{
							"name": "/api/basicService/validateString - Length Matched String",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d55569a-100a-48c0-9a1d-4dfa242d3388",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has a body in json format\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"    ",
											"    pm.response.to.have.jsonBody(\"resultCode\");",
											"    pm.response.to.have.jsonBody(\"message\");",
											"});",
											"",
											"pm.test(\"Response contains a success message\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData).not.eql(null);",
											"    pm.expect(jsonData.message).not.eql(null);",
											"    pm.expect(jsonData.resultCode).eql(0);",
											"    pm.expect(jsonData.message).to.include(\"String length matched\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bf365c16-d5fe-48ac-8674-8ea8c01f5838",
										"exec": [
											"const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";",
											"",
											"randomInt = (start, end) => _.random(start, end);",
											"",
											"randomWord = (len) => {",
											"    let word = \"\";",
											"    for (var i = 0; i < len; i++)",
											"        word += possible.charAt(randomInt(0, 51));",
											"    return word;",
											"};",
											"",
											"randomStringObjectJson = () => {",
											"    let total = randomInt(1, 512);",
											"    let string  = \"\";",
											"    let wordCount = 0;",
											"    let rest = total",
											"        while (true) {",
											"            let len = randomInt(1, rest);",
											"            let word = randomWord (len);",
											"            rest -= len;",
											"            if (rest >=0){",
											"                string += word;",
											"                wordCount++;",
											"            }else break;",
											"            ",
											"            if (rest >1){",
											"                string += ' ';",
											"                rest--;",
											"            }else break;",
											"        }",
											"    return JSON.stringify({\"input\": string, \"len\": wordCount});",
											"}",
											"",
											"",
											"",
											"pm.environment.set(\"test-data\", randomStringObjectJson());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{test-data}}\n"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/basicService/validateString",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"basicService",
										"validateString"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/basicService/validateString - Mismatched Length String",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d55569a-100a-48c0-9a1d-4dfa242d3388",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    // the request should still be finished successfully, regardless the response.",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has a body in json format\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"    ",
											"    pm.response.to.have.jsonBody(\"resultCode\");",
											"    pm.response.to.have.jsonBody(\"message\");",
											"});",
											"",
											"pm.test(\"Response contains an unsuccess message\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.resultCode).eql(1);",
											"    pm.expect(jsonData.message).not.eql(null);",
											"    pm.expect(jsonData.message).to.contain(\"length does not match\");",
											"    ",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a5059eb8-5d65-4c23-94b2-cfc1b04fbd55",
										"exec": [
											"const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";",
											"",
											"randomInt = (start, end) => _.random(start, end);",
											"",
											"randomWord = (len) => {",
											"    let word = \"\";",
											"    for (var i = 0; i < len; i++)",
											"        word += possible.charAt(randomInt(0, 51));",
											"    return word;",
											"};",
											"",
											"randomStringObjectJson = () => {",
											"    let total = randomInt(1, 512);",
											"    let string  = \"\";",
											"    let wordCount = 0;",
											"    let rest = total",
											"        while (true) {",
											"            let len = randomInt(1, rest);",
											"            let word = randomWord (len);",
											"            rest -= len;",
											"            if (rest >=0){",
											"                string += word;",
											"                wordCount++;",
											"            }else break;",
											"            ",
											"            if (rest >1){",
											"                string += ' ';",
											"                rest--;",
											"            }else break;",
											"        }",
											"    return JSON.stringify({\"input\": string, \"len\": wordCount+randomInt(1,10)});",
											"}",
											"",
											"",
											"",
											"pm.environment.set(\"test-data\", randomStringObjectJson());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{test-data}}\n"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/basicService/validateString",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"basicService",
										"validateString"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Invalid Request",
					"item": [
						{
							"name": "/api/basicService/validateString - Invalid Request (both wrong)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d55569a-100a-48c0-9a1d-4dfa242d3388",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response has a body in json format\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"    ",
											"    pm.response.to.have.jsonBody(\"resultCode\");",
											"    pm.response.to.have.jsonBody(\"message\");",
											"});",
											"",
											"pm.test(\"Response contains an unsuccess message\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.resultCode).eql(2);",
											"    pm.expect(jsonData.message).not.eql(null);",
											"    pm.expect(jsonData.message).to.contain(\"Invalid request format\");",
											"    ",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9653e98e-ba7c-4017-a2d4-beaf9210d760",
										"exec": [
											"const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";",
											"",
											"randomInt = (start, end) => _.random(start, end);",
											"",
											"randomWord = (len) => {",
											"    let word = \"\";",
											"    for (var i = 0; i < len; i++)",
											"        word += possible.charAt(randomInt(0, 51));",
											"    return word;",
											"};",
											"",
											"randomStringObjectJson = () => {",
											"    let total = randomInt(1, 512);",
											"    let string  = \"\";",
											"    let wordCount = 0;",
											"    let rest = total",
											"        while (true) {",
											"            let len = randomInt(1, rest);",
											"            let word = randomWord (len);",
											"            rest -= len;",
											"            if (rest >=0){",
											"                string += word;",
											"                wordCount++;",
											"            }else break;",
											"            ",
											"            if (rest >1){",
											"                string += ' ';",
											"                rest--;",
											"            }else break;",
											"        }",
											"    return JSON.stringify({\"invalid-input\": string, \"invalid-len\": wordCount});",
											"}",
											"",
											"",
											"",
											"pm.environment.set(\"test-data\", randomStringObjectJson());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{test-data}}"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/basicService/validateString",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"basicService",
										"validateString"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/basicService/validateString - Invalid Request (no len)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d55569a-100a-48c0-9a1d-4dfa242d3388",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response has a body in json format\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"    ",
											"    pm.response.to.have.jsonBody(\"resultCode\");",
											"    pm.response.to.have.jsonBody(\"message\");",
											"});",
											"",
											"pm.test(\"Response contains an unsuccess message\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.resultCode).eql(2);",
											"    pm.expect(jsonData.message).not.eql(null);",
											"    pm.expect(jsonData.message).to.contain(\"Invalid request format\");",
											"    ",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9653e98e-ba7c-4017-a2d4-beaf9210d760",
										"exec": [
											"const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";",
											"",
											"randomInt = (start, end) => _.random(start, end);",
											"",
											"randomWord = (len) => {",
											"    let word = \"\";",
											"    for (var i = 0; i < len; i++)",
											"        word += possible.charAt(randomInt(0, 51));",
											"    return word;",
											"};",
											"",
											"randomStringObjectJson = () => {",
											"    let total = randomInt(1, 512);",
											"    let string  = \"\";",
											"    let wordCount = 0;",
											"    let rest = total",
											"        while (true) {",
											"            let len = randomInt(1, rest);",
											"            let word = randomWord (len);",
											"            rest -= len;",
											"            if (rest >=0){",
											"                string += word;",
											"                wordCount++;",
											"            }else break;",
											"            ",
											"            if (rest >1){",
											"                string += ' ';",
											"                rest--;",
											"            }else break;",
											"        }",
											"    return JSON.stringify({\"input\": string});",
											"}",
											"",
											"pm.environment.set(\"test-data\", randomStringObjectJson());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{test-data}}"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/basicService/validateString",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"basicService",
										"validateString"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/basicService/validateString - Invalid Request (no input)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d55569a-100a-48c0-9a1d-4dfa242d3388",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response has a body in json format\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"    ",
											"    pm.response.to.have.jsonBody(\"resultCode\");",
											"    pm.response.to.have.jsonBody(\"message\");",
											"});",
											"",
											"pm.test(\"Response contains an unsuccess message\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.resultCode).eql(2);",
											"    pm.expect(jsonData.message).not.eql(null);",
											"    pm.expect(jsonData.message).to.contain(\"Invalid request format\");",
											"    ",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9653e98e-ba7c-4017-a2d4-beaf9210d760",
										"exec": [
											"const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";",
											"",
											"randomInt = (start, end) => _.random(start, end);",
											"",
											"randomWord = (len) => {",
											"    let word = \"\";",
											"    for (var i = 0; i < len; i++)",
											"        word += possible.charAt(randomInt(0, 51));",
											"    return word;",
											"};",
											"",
											"randomStringObjectJson = () => {",
											"    let total = randomInt(1, 512);",
											"    let string  = \"\";",
											"    let wordCount = 0;",
											"    let rest = total",
											"        while (true) {",
											"            let len = randomInt(1, rest);",
											"            let word = randomWord (len);",
											"            rest -= len;",
											"            if (rest >=0){",
											"                string += word;",
											"                wordCount++;",
											"            }else break;",
											"            ",
											"            if (rest >1){",
											"                string += ' ';",
											"                rest--;",
											"            }else break;",
											"        }",
											"    return JSON.stringify({\"len\": wordCount});",
											"}",
											"",
											"pm.environment.set(\"test-data\", randomStringObjectJson());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{test-data}}"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/basicService/validateString",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"basicService",
										"validateString"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/basicService/validateString - Invalid Request (invalid json format)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d55569a-100a-48c0-9a1d-4dfa242d3388",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response has a body in json format\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"    ",
											"    pm.response.to.have.jsonBody(\"resultCode\");",
											"    pm.response.to.have.jsonBody(\"message\");",
											"});",
											"",
											"pm.test(\"Response contains an unsuccess message\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.resultCode).eql(2);",
											"    pm.expect(jsonData.message).not.eql(null);",
											"    pm.expect(jsonData.message).to.contain(\"Invalid request format\");",
											"    ",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9653e98e-ba7c-4017-a2d4-beaf9210d760",
										"exec": [
											"const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";",
											"",
											"randomInt = (start, end) => _.random(start, end);",
											"",
											"randomWord = (len) => {",
											"    let word = \"\";",
											"    for (var i = 0; i < len; i++)",
											"        word += possible.charAt(randomInt(0, 51));",
											"    return word;",
											"};",
											"",
											"randomStringObjectJson = () => {",
											"    let total = randomInt(1, 512);",
											"    let string  = \"\";",
											"    let wordCount = 0;",
											"    let rest = total",
											"        while (true) {",
											"            let len = randomInt(1, rest);",
											"            let word = randomWord (len);",
											"            rest -= len;",
											"            if (rest >=0){",
											"                string += word;",
											"                wordCount++;",
											"            }else break;",
											"            ",
											"            if (rest >1){",
											"                string += ' ';",
											"                rest--;",
											"            }else break;",
											"        }",
											"    return \"some_invalid_string_to_break_json\" + JSON.stringify({\"input\": string,  \"len\": wordCount}) ;",
											"}",
											"",
											"pm.environment.set(\"test-data\", randomStringObjectJson());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{test-data}}"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/basicService/validateString",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"basicService",
										"validateString"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/basicService/validateString - Negative Len",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d55569a-100a-48c0-9a1d-4dfa242d3388",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response has a body in json format\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"    ",
											"    pm.response.to.have.jsonBody(\"resultCode\");",
											"    pm.response.to.have.jsonBody(\"message\");",
											"});",
											"",
											"pm.test(\"Response contains an unsuccess message\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.resultCode).eql(5);",
											"    pm.expect(jsonData.message).not.eql(null);",
											"    pm.expect(jsonData.message).to.contain(\"Length value is negative\");",
											"    ",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9653e98e-ba7c-4017-a2d4-beaf9210d760",
										"exec": [
											"const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";",
											"",
											"randomInt = (start, end) => _.random(start, end);",
											"",
											"randomWord = (len) => {",
											"    let word = \"\";",
											"    for (var i = 0; i < len; i++)",
											"        word += possible.charAt(randomInt(0, 51));",
											"    return word;",
											"};",
											"",
											"randomStringObjectJson = () => {",
											"    let total = randomInt(1, 512);",
											"    let string  = \"\";",
											"    let wordCount = 0;",
											"    let rest = total",
											"        while (true) {",
											"            let len = randomInt(1, rest);",
											"            let word = randomWord (len);",
											"            rest -= len;",
											"            if (rest >=0){",
											"                string += word;",
											"                wordCount++;",
											"            }else break;",
											"            ",
											"            if (rest >1){",
											"                string += ' ';",
											"                rest--;",
											"            }else break;",
											"        }",
											"    return JSON.stringify({\"input\": string,  \"len\": -1}) ;",
											"}",
											"",
											"pm.environment.set(\"test-data\", randomStringObjectJson());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{test-data}}"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/basicService/validateString",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"basicService",
										"validateString"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/basicService/validateString - Empty Input",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d55569a-100a-48c0-9a1d-4dfa242d3388",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response has a body in json format\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"    ",
											"    pm.response.to.have.jsonBody(\"resultCode\");",
											"    pm.response.to.have.jsonBody(\"message\");",
											"});",
											"",
											"pm.test(\"Response contains an unsuccess message\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.resultCode).eql(3);",
											"    pm.expect(jsonData.message).not.eql(null);",
											"    pm.expect(jsonData.message).to.contain(\"Input string is empty\");",
											"    ",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9653e98e-ba7c-4017-a2d4-beaf9210d760",
										"exec": [
											"randomInt = (start, end) => _.random(start, end);",
											"",
											"pm.environment.set(\"test-data\", JSON.stringify({\"input\": \"\",  \"len\": randomInt(1, 512)}));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{test-data}}"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/basicService/validateString",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"basicService",
										"validateString"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/basicService/validateString - Too Long Input",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d55569a-100a-48c0-9a1d-4dfa242d3388",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response has a body in json format\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"    ",
											"    pm.response.to.have.jsonBody(\"resultCode\");",
											"    pm.response.to.have.jsonBody(\"message\");",
											"});",
											"",
											"pm.test(\"Response contains an unsuccess message\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.resultCode).eql(4);",
											"    pm.expect(jsonData.message).not.eql(null);",
											"    pm.expect(jsonData.message).to.contain(\"Input string is too long\");",
											"    ",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9653e98e-ba7c-4017-a2d4-beaf9210d760",
										"exec": [
											"const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";",
											"",
											"randomInt = (start, end) => _.random(start, end);",
											"",
											"randomWord = (len) => {",
											"    let word = \"\";",
											"    for (var i = 0; i < len; i++)",
											"        word += possible.charAt(randomInt(0, 51));",
											"    return word;",
											"};",
											"",
											"randomStringObjectJson = () => {",
											"    let total = 600;",
											"    let string  = \"\";",
											"    let wordCount = 0;",
											"    let rest = total",
											"    while (true) {",
											"        let len = randomInt(1, rest);",
											"        let word = randomWord (len);",
											"        rest -= len;",
											"        if (rest >=0){",
											"            string += word;",
											"            wordCount++;",
											"        }else break;",
											"            ",
											"        if (rest >1){",
											"            string += ' ';",
											"            rest--;",
											"        }else break;",
											"    }",
											"    return JSON.stringify({\"input\": string,  \"len\": wordCount});",
											"}",
											"",
											"pm.environment.set(\"test-data\", randomStringObjectJson() );"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{test-data}}"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/basicService/validateString",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"basicService",
										"validateString"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "3481bc95-8305-45ee-a956-c4a5bba329e7",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "3938a872-0581-40cf-970e-c4f0b54efdbe",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}