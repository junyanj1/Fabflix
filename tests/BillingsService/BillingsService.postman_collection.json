{
  "info": {
    "_postman_id": "da476bc9-c81b-491a-9705-4da4e1a54138",
    "name": "BillingsService",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Shopping Cart",
      "item": [
        {
          "name": "Insert",
          "item": [
            {
              "name": "Email address has invalid format (Case -11)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 400\", () => {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(-11);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Email address has invalid format\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2fc604c4-0298-4baa-bd1c-f21536ae4c35",
                    "exec": [
                      "pm.variables.set(\"email1\", JSON.stringify(randomString(10) + \"@test.com\"));"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"email\": {{invalidFormatEmail}},\n   \"movieId\": {{movie1}},\n   \"quantity\": {{quantity1}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/cart/insert",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "cart",
                    "insert"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Email address has invalid length (Case -10)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 400\", () => {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(-10);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Email address has invalid length\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"email\": {{invalidLengthEmail}},\n   \"movieId\": {{movie1}},\n   \"quantity\": {{quantity1}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/cart/insert",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "cart",
                    "insert"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "JSON Mapping Exception - missing email (Case -2)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 400\", () => {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(-2);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"JSON Mapping Exception\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"movieId\": {{movie1}},\n   \"quantity\": {{quantity1}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/cart/insert",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "cart",
                    "insert"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "JSON Mapping Exception - missing movieId (Case -2)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 400\", () => {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(-2);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"JSON Mapping Exception\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"email\": {{email1}},\n   \"quantity\": {{quantity1}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/cart/insert",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "cart",
                    "insert"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "JSON Mapping Exception - missing quantity (Case -2)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 400\", () => {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(-2);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"JSON Mapping Exception\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"email\": {{email1}},\n   \"movieId\": {{movie1}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/cart/insert",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "cart",
                    "insert"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "JSON Mapping Exception - extra value (Case -2)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 400\", () => {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(-2);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"JSON Mapping Exception\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"email\": {{email1}},\n   \"movieId\": {{movie1}},\n   \"quantity\": {{quantity1}},\n   \"extra\": {{extraValue}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/cart/insert",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "cart",
                    "insert"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Quantity has invalid value - 0 value (Case 33)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(33);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Quantity has invalid value\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"email\": {{email1}},\n   \"movieId\": {{movie1}},\n   \"quantity\": 0\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/cart/insert",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "cart",
                    "insert"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Quantity has invalid value - negative value (Case 33)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(33);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Quantity has invalid value\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"email\": {{email1}},\n   \"movieId\": {{movie1}},\n   \"quantity\": {{negativeQuantity}}\n} \n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/cart/insert",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "cart",
                    "insert"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Shopping cart item inserted successfully (Case 3100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains a success message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(3100);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Shopping cart item inserted successfully\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"email\": {{email1}},\n   \"movieId\": {{movie1}},\n   \"quantity\": {{quantity1}}\n} \n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/cart/insert",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "cart",
                    "insert"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Shopping cart item inserted successfully (Case 3100) Another one",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains a success message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(3100);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Shopping cart item inserted successfully\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"email\": {{email1}},\n   \"movieId\": {{movie2}},\n   \"quantity\": {{quantity2}}\n} \n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/cart/insert",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "cart",
                    "insert"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Duplicate insertion (Case 33)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(311);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Duplicate insertion\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"email\": {{email1}},\n   \"movieId\": {{movie1}},\n   \"quantity\": {{quantity1}}\n} \n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/cart/insert",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "cart",
                    "insert"
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Retrieve",
          "item": [
            {
              "name": "Email address has invalid format (Case -11)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 400\", () => {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(-11);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Email address has invalid format\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"email\": {{invalidFormatEmail}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/cart/retrieve",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "cart",
                    "retrieve"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Email address has invalid length (Case -10)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 400\", () => {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(-10);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Email address has invalid length\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"email\": {{invalidLengthEmail}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/cart/retrieve",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "cart",
                    "retrieve"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "JSON Mapping Exception - extra value (Case -2)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 400\", () => {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(-2);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"JSON Mapping Exception\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"extra\": {{extraValue}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/cart/retrieve",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "cart",
                    "retrieve"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Shopping cart retrieved successfully (Case 3130)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), cartReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains a success message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(3130);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Shopping cart retrieved successfully\");",
                      "});",
                      "",
                      "pm.test(\"Response contains correct data\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    targetItems = JSON.parse(pm.variables.get(\"cartRetrieve1\"));",
                      "    console.log(targetItems);",
                      "    pm.expect(jsonData.items.length).eql(targetItems.length);",
                      "    ",
                      "    jsonData.items.sort(dynamicSort(\"movieId\"));",
                      "    targetItems.sort(dynamicSort(\"movieId\"));",
                      "    ",
                      "    for (i = 0; i< targetItems.length; i++){",
                      "        pm.expect(jsonData.items[i].movieId).eql(targetItems[i].movieId);",
                      "        pm.expect(jsonData.items[i].email).eql(JSON.parse(pm.variables.get(\"email1\")));",
                      "        pm.expect(jsonData.items[i].quantity).eql(targetItems[i].quantity); ",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"email\": {{email1}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/cart/retrieve",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "cart",
                    "retrieve"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Shopping item does not exist (Case 312)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(312);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Shopping item does not exist\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"email\": {{email3}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/cart/retrieve",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "cart",
                    "retrieve"
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Update",
          "item": [
            {
              "name": "Email address has invalid format (Case -11)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 400\", () => {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(-11);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Email address has invalid format\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"email\": {{invalidFormatEmail}},\n   \"movieId\": {{movie1}},\n   \"quantity\": {{quantity3}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/cart/update",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "cart",
                    "update"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Email address has invalid length (Case -10)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 400\", () => {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(-10);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Email address has invalid length\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"email\": {{invalidLengthEmail}},\n   \"movieId\": {{movie2}},\n   \"quantity\": {{quantity2}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/cart/update",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "cart",
                    "update"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "JSON Mapping Exception - missing email (Case -2)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 400\", () => {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(-2);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"JSON Mapping Exception\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"movieId\": {{movie1}},\n   \"quantity\": {{quantity3}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/cart/update",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "cart",
                    "update"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "JSON Mapping Exception - missing movieId (Case -2)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 400\", () => {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(-2);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"JSON Mapping Exception\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"email\": {{email1}},\n   \"quantity\": {{quantity3}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/cart/update",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "cart",
                    "update"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "JSON Mapping Exception - missing quantity (Case -2)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 400\", () => {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(-2);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"JSON Mapping Exception\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"email\": {{email1}},\n   \"movieId\": {{movie1}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/cart/update",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "cart",
                    "update"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "JSON Mapping Exception - extra value (Case -2)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 400\", () => {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(-2);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"JSON Mapping Exception\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"email\": {{email1}},\n   \"movieId\": {{movie1}},\n   \"quantity\": {{quantity3}},\n   \"extra\": {{extraValue}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/cart/update",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "cart",
                    "update"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Quantity has invalid value - 0 value (Case 33)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(33);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Quantity has invalid value\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"email\": {{email1}},\n   \"movieId\": {{movie1}},\n   \"quantity\": 0\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/cart/update",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "cart",
                    "update"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Quantity has invalid value - negative value (Case 33)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(33);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Quantity has invalid value\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"email\": {{email1}},\n   \"movieId\": {{movie1}},\n   \"quantity\": {{negativeQuantity}}\n} \n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/cart/update",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "cart",
                    "update"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Shopping cart item updated successfully (Case 3110)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains a success message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(3110);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Shopping cart item updated successfully\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"email\": {{email1}},\n   \"movieId\": {{movie1}},\n   \"quantity\": {{quantity3}}\n} \n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/cart/update",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "cart",
                    "update"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Retrieve to Verify",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), cartReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains a success message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(3130);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Shopping cart retrieved successfully\");",
                      "});",
                      "",
                      "pm.test(\"Response contains correct data\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    targetItems = JSON.parse(pm.variables.get(\"cartRetrieve2\"));",
                      "    console.log(targetItems);",
                      "    pm.expect(jsonData.items.length).eql(targetItems.length);",
                      "    ",
                      "    jsonData.items.sort(dynamicSort(\"movieId\"));",
                      "    targetItems.sort(dynamicSort(\"movieId\"));",
                      "    ",
                      "    for (i = 0; i< targetItems.length; i++){",
                      "        pm.expect(jsonData.items[i].movieId).eql(targetItems[i].movieId);",
                      "        pm.expect(jsonData.items[i].email).eql(JSON.parse(pm.variables.get(\"email1\")));",
                      "        pm.expect(jsonData.items[i].quantity).eql(targetItems[i].quantity); ",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"email\": {{email1}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/cart/retrieve",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "cart",
                    "retrieve"
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Delete",
          "item": [
            {
              "name": "Email address has invalid format (Case -11)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 400\", () => {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(-11);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Email address has invalid format\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"email\": {{invalidFormatEmail}},\n   \"movieId\": {{movie2}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/cart/delete",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "cart",
                    "delete"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Email address has invalid length (Case -10)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 400\", () => {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(-10);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Email address has invalid length\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"email\": {{invalidLengthEmail}},\n   \"movieId\": {{movie2}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/cart/delete",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "cart",
                    "delete"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "JSON Mapping Exception - missing email (Case -2)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 400\", () => {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(-2);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"JSON Mapping Exception\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"movieId\": {{movie2}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/cart/delete",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "cart",
                    "delete"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "JSON Mapping Exception - missing movieId (Case -2)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 400\", () => {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(-2);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"JSON Mapping Exception\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"email\": {{email1}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/cart/delete",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "cart",
                    "delete"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "JSON Mapping Exception - extra value (Case -2)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 400\", () => {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(-2);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"JSON Mapping Exception\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"email\": {{email1}},\n   \"movieId\": {{movie2}},\n   \"extra\": {{extraValue}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/cart/delete",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "cart",
                    "delete"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Shopping cart item deleted successfully (Case 3120)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains a success message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(3120);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Shopping cart item deleted successfully\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"email\": {{email1}},\n   \"movieId\": {{movie1}}\n} \n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/cart/delete",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "cart",
                    "delete"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Shopping item does not exist (Case 312)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(312);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Shopping item does not exist\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n    \"email\": {{email1}},\n\t\"movieId\": {{movie1}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/cart/delete",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "cart",
                    "delete"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Retrieve to Verify",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), cartReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains a success message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(3130);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Shopping cart retrieved successfully\");",
                      "});",
                      "",
                      "pm.test(\"Response contains correct data\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    targetItems = JSON.parse(pm.variables.get(\"cartRetrieve3\"));",
                      "    console.log(targetItems);",
                      "    pm.expect(jsonData.items.length).eql(targetItems.length);",
                      "    ",
                      "    jsonData.items.sort(dynamicSort(\"movieId\"));",
                      "    targetItems.sort(dynamicSort(\"movieId\"));",
                      "    ",
                      "    for (i = 0; i< targetItems.length; i++){",
                      "        pm.expect(jsonData.items[i].movieId).eql(targetItems[i].movieId);",
                      "        pm.expect(jsonData.items[i].email).eql(JSON.parse(pm.variables.get(\"email1\")));",
                      "        pm.expect(jsonData.items[i].quantity).eql(targetItems[i].quantity); ",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"email\": {{email1}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/cart/retrieve",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "cart",
                    "retrieve"
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Clear",
          "item": [
            {
              "name": "Email address has invalid format (Case -11)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 400\", () => {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(-11);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Email address has invalid format\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"email\": {{invalidFormatEmail}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/cart/clear",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "cart",
                    "clear"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Email address has invalid length (Case -10)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 400\", () => {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(-10);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Email address has invalid length\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"email\": {{invalidLengthEmail}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/cart/clear",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "cart",
                    "clear"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "JSON Mapping Exception - extra value (Case -2)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 400\", () => {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(-2);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"JSON Mapping Exception\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"extra\": {{extraValue}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/cart/clear",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "cart",
                    "clear"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Shopping cart cleared successfully (Case 3140)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains a success message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(3140);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Shopping cart cleared successfully\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"email\": {{email1}}\n} \n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/cart/clear",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "cart",
                    "clear"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Retrieve to Verify",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(312);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Shopping item does not exist\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"email\": {{email1}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/cart/retrieve",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "cart",
                    "retrieve"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Shopping item does not exist (Case 3140)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains a success message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(3140);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Shopping cart cleared successfully\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"email\": {{email3}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/cart/clear",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "cart",
                    "clear"
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        }
      ]
    },
    {
      "name": "Creditcard",
      "item": [
        {
          "name": "Insert",
          "item": [
            {
              "name": "JSON Mapping Exception - missing id (Case -2)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 400\", () => {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(-2);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"JSON Mapping Exception\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a9cf67f3-d873-477d-84ec-7782ff9e8112",
                    "exec": [
                      "pm.variables.set(\"creditCardId1\", JSON.stringify(\"9999888877776666\" + randomInt(100,1000).toString()));",
                      "pm.variables.set(\"creditCardId2\", JSON.stringify(\"9999887777776666\" + randomInt(100,1000).toString()));",
                      "pm.variables.set(\"creditCardId3\", JSON.stringify(\"9999888877777766\" + randomInt(100,1000).toString()));",
                      "",
                      "pm.variables.set(\"firstName1\", JSON.stringify (randomString(5) + \"FirstName\"));",
                      "pm.variables.set(\"lastName1\", JSON.stringify (randomString(5) + \"LastName\"));",
                      "pm.variables.set(\"firstName2\", JSON.stringify (randomString(5) + \"FirstName2\"));",
                      "pm.variables.set(\"lastName2\", JSON.stringify (randomString(5) + \"LastName2\"));",
                      "",
                      "monthInt = randomInt(1,12);",
                      "month = monthInt.toString();",
                      "if (monthInt < 10) month = \"0\" + month;",
                      "",
                      "dayInt = randomInt(1,28).toString();",
                      "day = dayInt.toString();",
                      "if (dayInt < 10) day = \"0\" + day;",
                      "pm.variables.set(\"date1\", JSON.stringify ( randomInt(2020, 2024).toString()+ \"-\" + month + \"-\" + day));",
                      "",
                      "monthInt = randomInt(1,12);",
                      "month = monthInt.toString();",
                      "if (monthInt < 10) month = \"0\" + month;",
                      "",
                      "dayInt = randomInt(1,28).toString();",
                      "day = dayInt.toString();",
                      "if (dayInt < 10) day = \"0\" + day;",
                      "pm.variables.set(\"invalidDate\", JSON.stringify ( randomInt(2010, 2018).toString()+ \"-\" + month + \"-\" + day ));"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"firstName\": {{firstName1}},\n    \"lastName\": {{lastName1}},\n    \"expiration\": {{date1}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/creditcard/insert",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "creditcard",
                    "insert"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "JSON Mapping Exception - extra value (Case -2)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 400\", () => {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(-2);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"JSON Mapping Exception\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": {{creditCardId1}},\n    \"firstName\": {{firstName1}},\n    \"lastName\": {{lastName1}},\n    \"expiration\": {{date1}},\n    \"extra\" : {{extraValue}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/creditcard/insert",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "creditcard",
                    "insert"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Credit card ID has invalid length - too short (Case 321)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(321);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Credit card ID has invalid length\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": {{tooShortCreditCardId}},\n    \"firstName\": {{firstName1}},\n    \"lastName\": {{lastName1}},\n    \"expiration\": {{date1}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/creditcard/insert",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "creditcard",
                    "insert"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Credit card ID has invalid length - too long (Case 321)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(321);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Credit card ID has invalid length\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": {{tooLongCreditCardId}},\n    \"firstName\": {{firstName1}},\n    \"lastName\": {{lastName1}},\n    \"expiration\": {{date1}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/creditcard/insert",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "creditcard",
                    "insert"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Credit card ID has invalid value (Case 322)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(322);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Credit card ID has invalid value\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": {{invalidCreditCardId}},\n    \"firstName\": {{firstName1}},\n    \"lastName\": {{lastName1}},\n    \"expiration\": {{date1}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/creditcard/insert",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "creditcard",
                    "insert"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Expiration has invalid value (Case 323)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(323);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"xpiration has invalid value\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": {{creditCardId1}},\n    \"firstName\": {{firstName1}},\n    \"lastName\": {{lastName1}},\n    \"expiration\": {{invalidDate}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/creditcard/insert",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "creditcard",
                    "insert"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Credit card inserted successfully (Case 3200)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "67dd3595-caec-4482-a2e4-a6d50bf135cf",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains a success message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(3200);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Credit card inserted successfully\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": {{creditCardId1}},\n    \"firstName\": {{firstName1}},\n    \"lastName\": {{lastName1}},\n    \"expiration\": {{date1}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/creditcard/insert",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "creditcard",
                    "insert"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Duplicate insertion (Case 325)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(325);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Duplicate insertion\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": {{creditCardId1}},\n    \"firstName\": {{firstName1}},\n    \"lastName\": {{lastName1}},\n    \"expiration\": {{date1}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/creditcard/insert",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "creditcard",
                    "insert"
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3a846fa0-4299-4255-b5e3-b1d321f9a497",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "42361819-7c37-4d8f-a74b-f9486f66908a",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Retrieve",
          "item": [
            {
              "name": "JSON Mapping Exception - extra value (Case -2)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 400\", () => {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(-2);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"JSON Mapping Exception\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"extra\" : {{extraValue}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/creditcard/retrieve",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "creditcard",
                    "retrieve"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Credit card ID has invalid length - too short (Case 321)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(321);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Credit card ID has invalid length\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": {{tooShortCreditCardId}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/creditcard/retrieve",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "creditcard",
                    "retrieve"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Credit card ID has invalid length - too long (Case 321)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(321);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Credit card ID has invalid length\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": {{tooLongCreditCardId}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/creditcard/retrieve",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "creditcard",
                    "retrieve"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Credit card ID has invalid value (Case 322)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(322);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Credit card ID has invalid value\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": {{invalidCreditCardId}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/creditcard/retrieve",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "creditcard",
                    "retrieve"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Credit card retrieved successfully (Case 3230)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), creditcardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains a success message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(3230);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Credit card retrieved successfully\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response contains correct data\", () => {",
                      "    let jsonData = pm.response.json();",
                      " ",
                      "    pm.expect(jsonData.creditcard.id).eql(JSON.parse(pm.variables.get(\"creditCardId1\")));",
                      "    pm.expect(jsonData.creditcard.firstName).eql(JSON.parse(pm.variables.get(\"firstName1\")));",
                      "    pm.expect(jsonData.creditcard.lastName).eql(JSON.parse(pm.variables.get(\"lastName1\"))); ",
                      "    pm.expect(jsonData.creditcard.expiration).eql(JSON.parse(pm.variables.get(\"date1\"))); ",
                      "    ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": {{creditCardId1}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/creditcard/retrieve",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "creditcard",
                    "retrieve"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Credit card does not exist (Case 324)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(324);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Credit card does not exist\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": {{creditCardId3}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/creditcard/retrieve",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "creditcard",
                    "retrieve"
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "eecc6249-85fb-4d77-b825-42ea93b30688",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "040363be-45b4-4917-b1a2-67d50201c007",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Update",
          "item": [
            {
              "name": "JSON Mapping Exception - missing id (Case -2)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 400\", () => {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(-2);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"JSON Mapping Exception\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "54395404-2964-401d-af86-c42f88975a6c",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"firstName\": {{firstName1}},\n    \"lastName\": {{lastName1}},\n    \"expiration\": {{date1}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/creditcard/update",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "creditcard",
                    "update"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "JSON Mapping Exception - extra value (Case -2)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 400\", () => {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(-2);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"JSON Mapping Exception\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": {{creditCardId1}},\n    \"firstName\": {{firstName1}},\n    \"lastName\": {{lastName1}},\n    \"expiration\": {{date1}},\n    \"extra\" : {{extraValue}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/creditcard/update",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "creditcard",
                    "update"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Credit card ID has invalid length - too short (Case 321)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(321);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Credit card ID has invalid length\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": {{tooShortCreditCardId}},\n    \"firstName\": {{firstName1}},\n    \"lastName\": {{lastName1}},\n    \"expiration\": {{date1}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/creditcard/update",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "creditcard",
                    "update"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Credit card ID has invalid length - too long (Case 321)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(321);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Credit card ID has invalid length\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": {{tooLongCreditCardId}},\n    \"firstName\": {{firstName1}},\n    \"lastName\": {{lastName1}},\n    \"expiration\": {{date1}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/creditcard/update",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "creditcard",
                    "update"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Credit card ID has invalid value (Case 322)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(322);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Credit card ID has invalid value\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": {{invalidCreditCardId}},\n    \"firstName\": {{firstName1}},\n    \"lastName\": {{lastName1}},\n    \"expiration\": {{date1}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/creditcard/update",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "creditcard",
                    "update"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Expiration has invalid value (Case 323)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(323);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"xpiration has invalid value\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": {{creditCardId1}},\n    \"firstName\": {{firstName1}},\n    \"lastName\": {{lastName1}},\n    \"expiration\": {{invalidDate}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/creditcard/update",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "creditcard",
                    "update"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Credit card updated successfully (Case 3210)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains a success message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(3210);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Credit card updated successfully\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": {{creditCardId1}},\n    \"firstName\": {{firstName2}},\n    \"lastName\": {{lastName2}},\n    \"expiration\": {{date1}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/creditcard/update",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "creditcard",
                    "update"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Retrieve to Verify",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), creditcardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains a success message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(3230);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Credit card retrieved successfully\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response contains correct data\", () => {",
                      "    let jsonData = pm.response.json();",
                      " ",
                      "    pm.expect(jsonData.creditcard.id).eql(JSON.parse(pm.variables.get(\"creditCardId1\")));",
                      "    pm.expect(jsonData.creditcard.firstName).eql(JSON.parse(pm.variables.get(\"firstName2\")));",
                      "    pm.expect(jsonData.creditcard.lastName).eql(JSON.parse(pm.variables.get(\"lastName2\"))); ",
                      "    pm.expect(jsonData.creditcard.expiration).eql(JSON.parse(pm.variables.get(\"date1\"))); ",
                      "    ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": {{creditCardId1}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/creditcard/retrieve",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "creditcard",
                    "retrieve"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Credit card does not exist (Case 324)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(324);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Credit card does not exist\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": {{creditCardId3}},\n    \"firstName\": {{firstName1}},\n    \"lastName\": {{lastName1}},\n    \"expiration\": {{date1}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/creditcard/update",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "creditcard",
                    "update"
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "eecc6249-85fb-4d77-b825-42ea93b30688",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "040363be-45b4-4917-b1a2-67d50201c007",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Delete",
          "item": [
            {
              "name": "JSON Mapping Exception - extra value (Case -2)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 400\", () => {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(-2);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"JSON Mapping Exception\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"extra\" : {{extraValue}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/creditcard/delete",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "creditcard",
                    "delete"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Credit card ID has invalid length - too short (Case 321)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(321);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Credit card ID has invalid length\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": {{tooShortCreditCardId}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/creditcard/delete",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "creditcard",
                    "delete"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Credit card ID has invalid length - too long (Case 321)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(321);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Credit card ID has invalid length\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": {{tooLongCreditCardId}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/creditcard/delete",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "creditcard",
                    "delete"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Credit card ID has invalid value (Case 322)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(322);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Credit card ID has invalid value\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": {{invalidCreditCardId}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/creditcard/delete",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "creditcard",
                    "delete"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Credit card deleted successfully (Case 3220)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains a success message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(3220);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Credit card deleted successfully\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": {{creditCardId1}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/creditcard/delete",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "creditcard",
                    "delete"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Credit card does not exist (Case 324)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(324);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Credit card does not exist\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": {{creditCardId3}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/creditcard/delete",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "creditcard",
                    "delete"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Retrieve to Verify",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(324);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Credit card does not exist\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": {{creditCardId1}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/creditcard/retrieve",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "creditcard",
                    "retrieve"
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "eecc6249-85fb-4d77-b825-42ea93b30688",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "040363be-45b4-4917-b1a2-67d50201c007",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        }
      ]
    },
    {
      "name": "Customer",
      "item": [
        {
          "name": "Insert",
          "item": [
            {
              "name": "JSON Mapping Exception - missing email (Case -2)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 400\", () => {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(-2);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"JSON Mapping Exception\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a9cf67f3-d873-477d-84ec-7782ff9e8112",
                    "exec": [
                      "pm.variables.set(\"firstName3\", JSON.stringify (randomString(5) + \"FirstName3\"));",
                      "pm.variables.set(\"lastName3\", JSON.stringify (randomString(5) + \"LastName3\"));",
                      "pm.variables.set(\"email1\", JSON.stringify(randomString(10) + \"@test.com\"));",
                      "pm.variables.set(\"address\", JSON.stringify(randomString(20) + \"Some random Address\"));",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"firstName\": {{firstName3}},\n    \"lastName\": {{lastName3}},\n    \"ccId\": {{existingCreditCardId}},\n    \"address\": {{address}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/customer/insert",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "customer",
                    "insert"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "JSON Mapping Exception - extra value (Case -2)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 400\", () => {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(-2);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"JSON Mapping Exception\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": {{email1}},\n    \"firstName\": {{firstName3}},\n    \"lastName\": {{lastName3}},\n    \"ccId\": {{existingCreditCardId}},\n    \"address\": {{address}},\n    \"extra\" : {{extraValue}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/customer/insert",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "customer",
                    "insert"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Credit card ID has invalid length - too short (Case 321)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(321);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Credit card ID has invalid length\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"ccId\": {{tooShortCreditCardId}},\n    \"email\": {{email1}},\n    \"firstName\": {{firstName3}},\n    \"lastName\": {{lastName3}},\n    \"address\": {{address}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/customer/insert",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "customer",
                    "insert"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Credit card ID has invalid length - too long (Case 321)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(321);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Credit card ID has invalid length\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"ccId\": {{tooLongCreditCardId}},\n    \"email\": {{email1}},\n    \"firstName\": {{firstName3}},\n    \"lastName\": {{lastName3}},\n    \"address\": {{address}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/customer/insert",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "customer",
                    "insert"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Credit card ID has invalid value (Case 322)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(322);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Credit card ID has invalid value\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": {{email1}},\n    \"firstName\": {{firstName3}},\n    \"lastName\": {{lastName3}},\n    \"ccId\": {{invalidCreditCardId}},\n    \"address\": {{address}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/customer/insert",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "customer",
                    "insert"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Credit card ID not found (Case 331)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(331);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Credit card ID not found\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": {{email1}},\n    \"firstName\": {{firstName3}},\n    \"lastName\": {{lastName3}},\n    \"ccId\": {{nonExistingCreditCardId}},\n    \"address\": {{address}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/customer/insert",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "customer",
                    "insert"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Customer inserted successfully (Case 3300)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "67dd3595-caec-4482-a2e4-a6d50bf135cf",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains a success message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(3300);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Customer inserted successfully\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": {{email1}},\n    \"firstName\": {{firstName3}},\n    \"lastName\": {{lastName3}},\n    \"ccId\": {{existingCreditCardId}},\n    \"address\": {{address}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/customer/insert",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "customer",
                    "insert"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Duplicate insertion (Case 333)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(333);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Duplicate insertion\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": {{email1}},\n    \"firstName\": {{firstName3}},\n    \"lastName\": {{lastName3}},\n    \"ccId\": {{existingCreditCardId}},\n    \"address\": {{address}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/customer/insert",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "customer",
                    "insert"
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3a846fa0-4299-4255-b5e3-b1d321f9a497",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "42361819-7c37-4d8f-a74b-f9486f66908a",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Update",
          "item": [
            {
              "name": "JSON Mapping Exception - missing email (Case -2)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 400\", () => {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(-2);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"JSON Mapping Exception\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a9cf67f3-d873-477d-84ec-7782ff9e8112",
                    "exec": [
                      "pm.variables.set(\"firstName4\", JSON.stringify (randomString(5) + \"FirstName4\"));",
                      "pm.variables.set(\"lastName4\", JSON.stringify (randomString(5) + \"LastName4\"));",
                      "pm.variables.set(\"address\", JSON.stringify(randomString(20) + \"updated random Address\"));",
                      "pm.variables.set(\"email2\", JSON.stringify(randomString(10) + \"@test.com\"));",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"firstName\": {{firstName4}},\n    \"lastName\": {{lastName4}},\n    \"ccId\": {{existingCreditCardId}},\n    \"address\": {{address}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/customer/update",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "customer",
                    "update"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "JSON Mapping Exception - extra value (Case -2)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 400\", () => {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(-2);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"JSON Mapping Exception\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": {{email1}},\n    \"firstName\": {{firstName4}},\n    \"lastName\": {{lastName4}},\n    \"ccId\": {{existingCreditCardId}},\n    \"address\": {{address}},\n    \"extra\" : {{extraValue}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/customer/update",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "customer",
                    "update"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Credit card ID has invalid length - too short (Case 321)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(321);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Credit card ID has invalid length\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"ccId\": {{tooShortCreditCardId}},\n    \"email\": {{email1}},\n    \"firstName\": {{firstName4}},\n    \"lastName\": {{lastName4}},\n    \"address\": {{address}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/customer/update",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "customer",
                    "update"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Credit card ID has invalid length - too long (Case 321)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(321);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Credit card ID has invalid length\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"ccId\": {{tooLongCreditCardId}},\n    \"email\": {{email1}},\n    \"firstName\": {{firstName4}},\n    \"lastName\": {{lastName4}},\n    \"address\": {{address}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/customer/update",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "customer",
                    "update"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Credit card ID has invalid value (Case 322)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(322);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Credit card ID has invalid value\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": {{email1}},\n    \"firstName\": {{firstName4}},\n    \"lastName\": {{lastName4}},\n    \"ccId\": {{invalidCreditCardId}},\n    \"address\": {{address}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/customer/update",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "customer",
                    "update"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Credit card ID not found (Case 331)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(331);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Credit card ID not found\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": {{email1}},\n    \"firstName\": {{firstName4}},\n    \"lastName\": {{lastName4}},\n    \"ccId\": {{nonExistingCreditCardId}},\n    \"address\": {{address}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/customer/update",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "customer",
                    "update"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Customer updated successfully (Case 3310)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "67dd3595-caec-4482-a2e4-a6d50bf135cf",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains a success message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(3310);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Customer updated successfully\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": {{email1}},\n    \"firstName\": {{firstName4}},\n    \"lastName\": {{lastName4}},\n    \"ccId\": {{existingCreditCardId}},\n    \"address\": {{address}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/customer/update",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "customer",
                    "update"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Customer does not exist (Case 333)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(332);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Customer does not exist\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": {{email2}},\n    \"firstName\": {{firstName3}},\n    \"lastName\": {{lastName3}},\n    \"ccId\": {{existingCreditCardId}},\n    \"address\": {{address}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/customer/update",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "customer",
                    "update"
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3a846fa0-4299-4255-b5e3-b1d321f9a497",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "42361819-7c37-4d8f-a74b-f9486f66908a",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Retrieve",
          "item": [
            {
              "name": "JSON Mapping Exception - extra value (Case -2)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 400\", () => {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(-2);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"JSON Mapping Exception\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a9cf67f3-d873-477d-84ec-7782ff9e8112",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"extra\" : {{extraValue}}\n}"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/customer/retrieve",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "customer",
                    "retrieve"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Customer retrieved successfully (Case 3320)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "67dd3595-caec-4482-a2e4-a6d50bf135cf",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), customerReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains a success message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(3320);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Customer retrieved successfully\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response contains correct data\", () => {",
                      "    let jsonData = pm.response.json();",
                      " ",
                      "    pm.expect(jsonData.customer.email).eql(JSON.parse(pm.variables.get(\"email1\")));",
                      "    pm.expect(jsonData.customer.firstName).eql(JSON.parse(pm.variables.get(\"firstName4\")));",
                      "    pm.expect(jsonData.customer.lastName).eql(JSON.parse(pm.variables.get(\"lastName4\"))); ",
                      "    pm.expect(jsonData.customer.ccId).eql(JSON.parse(pm.variables.get(\"existingCreditCardId\"))); ",
                      "    pm.expect(jsonData.customer.address).eql(JSON.parse(pm.variables.get(\"address\"))); ",
                      "    ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": {{email1}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/customer/retrieve",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "customer",
                    "retrieve"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Customer does not exist (Case 333)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(332);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Customer does not exist\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": {{email2}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/customer/retrieve",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "customer",
                    "retrieve"
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3a846fa0-4299-4255-b5e3-b1d321f9a497",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "42361819-7c37-4d8f-a74b-f9486f66908a",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        }
      ]
    },
    {
      "name": "Order",
      "item": [
        {
          "name": "Place",
          "item": [
            {
              "name": "Shopping cart for this customer not found (Case 341)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(341);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Shopping cart for this customer not found\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"email\": {{email1}}\n} \n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/order/place",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "order",
                    "place"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Insert Movie1 to Shopping Cart",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "6215a26e-cd74-47d9-939b-b0201417edbb",
                    "exec": [
                      "m1 = \"tt\" + randomInt(100000,1000000).toString();",
                      "m2 = \"tt\" + randomInt(100000,1000000).toString();",
                      "m3 = \"tt\" + randomInt(100000,1000000).toString();",
                      "q1 = randomInt(1,20);",
                      "q2 = randomInt(20,30);",
                      "q3 = randomInt(1,20);",
                      "q4 = randomInt(30,40);",
                      "q5 = randomInt(100,200);",
                      "",
                      "pm.variables.set(\"movie1\", JSON.stringify(m1));",
                      "pm.variables.set(\"movie2\", JSON.stringify(m2));",
                      "pm.variables.set(\"movie3\", JSON.stringify(m3));",
                      "pm.variables.set(\"quantity1\", JSON.stringify(q1));",
                      "pm.variables.set(\"quantity2\", JSON.stringify(q2));",
                      "pm.variables.set(\"quantity3\", JSON.stringify(q3));",
                      "pm.variables.set(\"quantity4\", JSON.stringify(q4));",
                      "pm.variables.set(\"quantity5\", JSON.stringify(q5));",
                      "",
                      "pm.variables.set(\"orderMovies\", JSON.stringify([ {",
                      "            \"movieId\": m1,",
                      "            \"quantity\": q2",
                      "        },",
                      "        {",
                      "            \"movieId\": m2,",
                      "            \"quantity\": q4",
                      "        },",
                      "        {",
                      "            \"movieId\": m3,",
                      "            \"quantity\": q5",
                      "        }",
                      "        ",
                      "]))",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"email\": {{customerEmail}},\n   \"movieId\": {{movie1}},\n   \"quantity\": {{quantity1}}\n} \n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/cart/insert",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "cart",
                    "insert"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Movie1's Quantity",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "6215a26e-cd74-47d9-939b-b0201417edbb",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"email\": {{customerEmail}},\n   \"movieId\": {{movie1}},\n   \"quantity\": {{quantity2}}\n} \n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/cart/update",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "cart",
                    "update"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Insert Movie2 to Shopping Cart",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "6215a26e-cd74-47d9-939b-b0201417edbb",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"email\": {{customerEmail}},\n   \"movieId\": {{movie2}},\n   \"quantity\": {{quantity3}}\n} \n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/cart/insert",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "cart",
                    "insert"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Insert Movie3 to Shopping Cart",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "6215a26e-cd74-47d9-939b-b0201417edbb",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"email\": {{customerEmail}},\n   \"movieId\": {{movie3}},\n   \"quantity\": {{quantity5}}\n} \n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/cart/insert",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "cart",
                    "insert"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Movie2's Quantity",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "6215a26e-cd74-47d9-939b-b0201417edbb",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"email\": {{customerEmail}},\n   \"movieId\": {{movie2}},\n   \"quantity\": {{quantity4}}\n} \n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/cart/update",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "cart",
                    "update"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Order placed successfully (Case 3400)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains a success message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(3400);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Order placed successfully\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"email\": {{customerEmail}}\n} \n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/order/place",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "order",
                    "place"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Verify Shopping Cart to be Empty",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(341);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Shopping cart for this customer not found\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \n   \"email\": {{customerEmail}}\n} \n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/order/place",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "order",
                    "place"
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Retrieve",
          "item": [
            {
              "name": "JSON Mapping Exception - extra value (Case -2)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 400\", () => {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(-2);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"JSON Mapping Exception\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a9cf67f3-d873-477d-84ec-7782ff9e8112",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"extra\" : {{extraValue}}\n}"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/order/retrieve",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "order",
                    "retrieve"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Orders retrieved successfully (Case 3410)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "67dd3595-caec-4482-a2e4-a6d50bf135cf",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), orderReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains a success message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(3410);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Orders retrieved successfully\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response contains correct data\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    targetItems = JSON.parse(pm.variables.get(\"orderMovies\"));",
                      "    pm.expect(jsonData.items.length).eql(targetItems.length);",
                      "    ",
                      "    jsonData.items.sort(dynamicSort(\"movieId\"));",
                      "    targetItems.sort(dynamicSort(\"movieId\"));",
                      "    ",
                      "    for (i = 0; i< targetItems.length; i++){",
                      "        pm.expect(jsonData.items[i].movieId).eql(targetItems[i].movieId);",
                      "        pm.expect(jsonData.items[i].email).eql(JSON.parse(pm.variables.get(\"customerEmail\")));",
                      "        pm.expect(jsonData.items[i].quantity).eql(targetItems[i].quantity); ",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": {{customerEmail}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/order/retrieve",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "order",
                    "retrieve"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Customer does not exist (Case 332)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", () => {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has a body in json format\", () => {",
                      "    pm.response.to.be.withBody;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      "pm.test('Response matches the required schema', () => {",
                      "    pm.expect(tv4.validate(pm.response.json(), standardReturnSchema, false, true)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response contains an error message\", () => {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData.resultCode).eql(332);",
                      "",
                      "    pm.expect(jsonData.message).not.eql(null);",
                      "    pm.expect(jsonData.message).to.contain(\"Customer does not exist\");",
                      "     ",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      "",
                      "",
                      "pm.variables.unset(\"email1\");",
                      "pm.variables.unset(\"email2\");",
                      "pm.variables.unset(\"email3\");",
                      "pm.variables.unset(\"movie1\");",
                      "pm.variables.unset(\"movie2\");",
                      "pm.variables.unset(\"movie3\");",
                      "pm.variables.unset(\"quantity1\");",
                      "pm.variables.unset(\"quantity2\");",
                      "pm.variables.unset(\"quantity3\");",
                      "pm.variables.unset(\"quantity4\");",
                      "pm.variables.unset(\"quantity5\");",
                      "pm.variables.unset(\"firstName1\");",
                      "pm.variables.unset(\"firstName2\");",
                      "pm.variables.unset(\"firstName3\");",
                      "pm.variables.unset(\"firstName4\");",
                      "pm.variables.unset(\"lastName1\");",
                      "pm.variables.unset(\"lastName2\");",
                      "pm.variables.unset(\"lastName3\");",
                      "pm.variables.unset(\"lastName4\");"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "184abc5e-dd39-4d77-b960-869efb907cee",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": {{email2}}\n}\n"
                },
                "url": {
                  "raw": "http://{{host}}:{{port}}/api/billing/order/retrieve",
                  "protocol": "http",
                  "host": [
                    "{{host}}"
                  ],
                  "port": "{{port}}",
                  "path": [
                    "api",
                    "billing",
                    "order",
                    "retrieve"
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3a846fa0-4299-4255-b5e3-b1d321f9a497",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "42361819-7c37-4d8f-a74b-f9486f66908a",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "bd22941f-9b6c-4f5f-af97-604495cb433d",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "cff9bbb2-7118-41d6-9a35-70a760206a0c",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "297033db-0883-43a7-8835-75d4b3fcb1ec",
        "type": "text/javascript",
        "exec": [
          "const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234567890\";",
          "",
          "randomInt = (start, end) => _.random(start, end);",
          "randomString = (len) => {",
          "    let string = \"\";",
          "    for (var i = 0; i < len; i++)",
          "        string += possible.charAt(randomInt(0, 61));",
          "    return string;",
          "};",
          "",
          "dynamicSort = (property) => {",
          "    let sortOrder = 1;",
          "    if(property[0] === \"-\") {",
          "        sortOrder = -1;",
          "        property = property.substr(1);",
          "    }",
          "    return (a,b) =>{",
          "        return ((a[property] < b[property]) ? -1 : (a[property] > b[property]) ? 1 : 0) * sortOrder;",
          "    }",
          "}",
          "",
          "standardReturnSchema = {",
          "    \"type\" : \"object\",",
          "    \"properties\" : {",
          "        \"resultCode\" : {",
          "            \"type\" : \"number\"",
          "        },",
          "        \"message\" : {",
          "            \"type\" : \"string\"",
          "        }",
          "    }",
          "};",
          "",
          "cartReturnSchema =  {",
          "    \"type\" : \"object\",",
          "    \"properties\" : {",
          "        \"resultCode\" : {",
          "            \"type\" : \"number\"",
          "        },",
          "        \"message\" : {",
          "            \"type\" : \"string\"",
          "        },",
          "        \"items\" : {",
          "            \"type\": \"array\",",
          "            \"items\": {",
          "                \"type\" : \"object\",",
          "                \"properties\" : {",
          "                    \"email\" : {",
          "                        \"type\" :\"string\"",
          "                    },",
          "                    \"movieId\":{",
          "                        \"type\" : \"string\"",
          "                    },",
          "                    \"quantity\" : {",
          "                        \"type\" : \"number\"",
          "                    }",
          "                    ",
          "                }",
          "                ",
          "            }",
          "        }",
          "    }",
          "};",
          "",
          "creditcardReturnSchema =  {",
          "    \"type\" : \"object\",",
          "    \"properties\" : {",
          "        \"resultCode\" : {",
          "            \"type\" : \"number\"",
          "        },",
          "        \"message\" : {",
          "            \"type\" : \"string\"",
          "        },",
          "        \"creditcard\" : {",
          "            \"type\" : \"object\",",
          "            \"properties\" : {",
          "                \"id\" : {",
          "                    \"type\" :\"string\"",
          "                },",
          "                \"firstName\":{",
          "                    \"type\" : \"string\"",
          "                },",
          "                \"lastName\":{",
          "                    \"type\" : \"string\"",
          "                },",
          "                \"expiration\" : {",
          "                    \"type\" : \"string\"",
          "                }",
          "            }",
          "        }",
          "    }",
          "};",
          "customerReturnSchema = {",
          "    \"type\" : \"object\",",
          "    \"properties\" : {",
          "        \"resultCode\" : {",
          "            \"type\" : \"number\"",
          "        },",
          "        \"message\" : {",
          "            \"type\" : \"string\"",
          "        },",
          "        \"customer\" : {",
          "            \"type\" : \"object\",",
          "            \"properties\" : {",
          "                \"email\" : {",
          "                    \"type\" :\"string\"",
          "                },",
          "                \"firstName\":{",
          "                    \"type\" : \"string\"",
          "                },",
          "                \"lastName\":{",
          "                    \"type\" : \"string\"",
          "                },",
          "                \"ccId\" : {",
          "                    \"type\" : \"string\"",
          "                },",
          "                \"address\" : {",
          "                    \"type\" : \"string\"",
          "                }",
          "            }",
          "        }",
          "    }",
          "};",
          "",
          "orderReturnSchema = {",
          "    \"type\" : \"object\",",
          "    \"properties\" : {",
          "        \"resultCode\" : {",
          "            \"type\" : \"number\"",
          "        },",
          "        \"message\" : {",
          "            \"type\" : \"string\"",
          "        },",
          "        \"items\" : {",
          "            \"type\" : \"array\",",
          "            \"itmes\" : {",
          "                \"type\" : \"object\",",
          "                \"properties\" : {",
          "                    \"email\" : {",
          "                        \"type\" :\"string\"",
          "                    },",
          "                    \"movieId\":{",
          "                        \"type\" : \"string\"",
          "                    },",
          "                    \"quantity\":{",
          "                        \"type\" : \"number\"",
          "                    },",
          "                    \"saleDate\" : {",
          "                        \"type\" : \"string\"",
          "                    }",
          "                }",
          "            }",
          "        }",
          "    }",
          "};"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "f8a10ec5-3b1b-449d-8937-c488cd8ab559",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ]
}